<?xml version="1.0" encoding="UTF-8"?>
<project name="idom" default="deploy-production" basedir=".">
  <property name="svnurl" value="svn+ssh://svnbot@demo.idom.net.ua/var/svn/repositories/idom/tags" />
  <property name="wiki_svn" value="svn+ssh://svnbot@demo.idom.net.ua/var/svn/repositories/idom/wiki/lib/tpl/idom_template" />
  <property name="wiki_tpl_dir" value="/home/dev/www/wiki.idom.net.ua/public_html/lib/tpl" />
  <property name="wiki_tpl_name" value="idom_template" />
  <property name="source_dir" value="${basedir}/public_html" />
  <property name="test_dir" value="${source_dir}/system/application/tests" />
  <property name="docroot" value="${basedir}/public_html" />
  <property name="dbsrv" value="db.idom.net.ua" />
  <property name="db" value="idom_db" />
  <property name="dblogin" value="idom" />
  <property name="dbpass" value="iNahs72PQsiad1" />
  <property name="cimake" value="${source_dir}/system/application/tests/cimake" />

  <target name="deploy-production" depends="backup-database,switch,checkout,set-permissions,db-migrate" description="Deploy new version of the project" />

  <target name="deploy-latest" depends="set-latest-svntag,switch,checkout,set-permissions,db-migrate" description="Deploy latest build of the project" />

  <target name="set-latest-svntag">
    <property name="svntag" value="idom.build.last" />
  </target>

  <target name="chksource_dir" if="svntag"> 
    <available property="lets-switch" file="${source_dir}/.svn" type="dir" />
    <condition property="lets-checkout">
      <not> <isset property="lets-switch" /> </not>
    </condition>
  </target> 

  <target name="switch" depends="chksource_dir" if="lets-switch">
    <echo message="Working directory exist. Switching to tag ${svntag}..." />
    <exec executable="svn" dir="${docroot}">
      <arg line="switch ${svnurl}/${svntag} ${source_dir}" />
    </exec>
  </target>

  <target name="checkout" depends="chksource_dir" if="lets-checkout">
    <echo message="Working directory is not exist. Checking out..." />
    <exec executable="svn" dir="${docroot}">
      <arg line="checkout ${svnurl}/${svntag} ${source_dir}" />
    </exec>
    <echo message="Do not forget to edit config.php and database.php to run CI!!!" />
  </target>

  <target name="set-permissions" depends="set-system-permissions,set-photos-permissions,set-captcha-permissions" description="Set permissions required for CI"> 
  </target>

  <target name="set-system-permissions" description="Set permissions required for CI core">
    <chmod perm="775" type="dir">
      <fileset dir="${docroot}/system/logs" />
      <fileset dir="${docroot}/system/cache" />    
    </chmod>
  </target>

  <target name="set-photos-permissions" depends="check_photos" if="photos-dir-exists" description="Set permissions required for photo uploads">
    <chmod perm="775" type="dir">
      <fileset dir="${docroot}/photos" />
    </chmod>
  </target>

  <target name="check_photos">
    <available property="photos-dir-exists" file="${docroot}/photos" type="dir" />
  </target>

  <target name="set-captcha-permissions" depends="check_captcha" if="captcha-dir-exists" description="Set permissions required for CAPTCHA">
    <chmod perm="775" type="dir">
       <fileset dir="${docroot}/img/captcha" />
    </chmod>
  </target>

  <target name="check_captcha">
    <available property="captcha-dir-exists" file="${docroot}/img/captcha" type="dir" />
  </target>

  <target name="db-migrate" description="Migrate database schema"> 
    <exec executable="${cimake}" dir="${test_dir}"> 
      <arg line="load_migrations dsn=mysql://${dblogin}:${dbpass}@${dbsrv}/${db}" />
    </exec>
  </target>

  <target name="update-regions" depends="db-migrate" description="Load district polygons from dump">
    <exec executable="mysql" dir="${source_dir}/sql">
      <arg line="-u ${dblogin} -p${dbpass} -h ${dbsrv} ${db} -e 'source idom_estate_near_objects.sql'" />
    </exec>
  </target>

  <target name="backup-database" description="Save current DB to dump file">
     <tstamp/>
     <exec executable="mysqldump" dir="${source_dir}/sql" output="${source_dir}/sql/backup_${DSTAMP}_${TSTAMP}.sql">
       <arg line="-u ${dblogin} -p${dbpass} -h ${dbsrv} ${db}" />
     </exec>
  </target>

  <target name="restore-database" description="Load backup to DB" if="backup-file">
    <exec executable="mysql" dir="${source_dir}/sql">
      <arg line="-u ${dblogin} -p${dbpass} -h ${dbsrv} ${db} -e 'source ${backup-file}'" />
     </exec>
  </target>

  <target name="db-fixtures" description="Load fixtures">
    <exec executable="${cimake}" dir="${test_dir}">
      <arg line="load_fixtures dsn=mysql://${dblogin}:${dbpass}@${dbsrv}/${db}" />
    </exec>
  </target>

  <target name="update-wiki-template" depends="update-wiki,checkout-wiki,set-wiki-permissions" description="Updates wiki template from svn" />
  
  <target name="set-wiki-permissions">
    <chgrp group="www" type="both">
      <fileset dir="${wiki_tpl_dir}/${wiki_tpl_name}" />
    </chgrp>
    <chmod perm="775" type="dir">
      <fileset dir="${wiki_tpl_dir}/${wiki_tpl_name}" />
    </chmod>
    <chmod perm="664" type="file">
      <fileset dir="${wiki_tpl_dir}/${wiki_tpl_name}" />
    </chmod>
  </target>

  <target name="check-wiki-tpl">
    <available property="lets-switch-wiki" file="${wiki_tpl_dir}/${wiki_tpl_name}" type="dir" />
    <condition property="lets-checkout-wiki">
      <not> <isset property="lets-switch-wiki" /> </not>
    </condition>
  </target>

  <target name="photos-migrate" description="Copy object photos from old ierarchy to new">
    <exec executable="find" dir="${docroot}/photos">
      <!-- <arg line="sellers -type d -regex '.*\/objects\/.*' -execdir cp -a {} ../../../objects/ ;" /> -->
      <arg line="sellers -type d -regex '.*\/objects\/.*' -execdir cp -av {} ../../../objects/ ;" />
    </exec>
  </target>

  <target name="update-wiki" depends="check-wiki-tpl" if="lets-switch-wiki">
    <echo message="Templte directory exist. Updating..." />
    <exec executable="svn" dir="${wiki_tpl_dir}/${wiki_tpl_name}">
      <arg line="update" />
    </exec>
  </target>
     
  <target name="checkout-wiki" depends="check-wiki-tpl" if="lets-checkout-wiki">
    <echo message="Template directory is not exist. Checking out..." />
    <exec executable="svn" dir="${wiki_tpl_dir}">
      <arg line="checkout ${wiki_svn} ${wiki_tpl_dir}/${wiki_tpl_name}" />
    </exec>
  </target>

</project>
